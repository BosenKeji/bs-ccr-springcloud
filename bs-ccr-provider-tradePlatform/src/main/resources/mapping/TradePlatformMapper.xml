<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.bosenkeji.mapper.TradePlatformMapper">
  <resultMap id="BaseResultMap" type="cn.bosenkeji.vo.tradplateform.TradePlatform">
    <!--@mbg.generated-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="logo" jdbcType="VARCHAR" property="logo" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <association javaType="cn.bosenkeji.vo.tradplateform.TradePlatformApi" property="tradePlatformApi">
      <id property="id" column="tpaId"/>
      <result column="tid" property="tradePlatformId"/>
      <result column="user_id" property="userId"/>
      <result property="nickname" column="nickname"/>
      <result column="access_key" property="accessKey"/>
      <result column="secret_key" property="secretKey"/>
      <result column="sign" property="sign"/>
      <result column="tpaStatus" property="status"/>
      <result column="tpaCreateAt" property="createdAt"/>
      <result column="tpaUpdateAt" property="updatedAt"/>
    </association>

    <collection property="coinPairs" ofType="cn.bosenkeji.vo.coin.CoinPair">
      <id column="cpId" property="id"/>
      <result column="cpName" property="name"/>
      <result column="is_official_set" property="isOfficialSet"/>
      <result column="is_popular" property="isPopular"/>
      <result column="cpStatus" property="status"/>
      <result column="cpCreatedAt" property="createdAt"/>
      <result column="cpUpdatedAt" property="updatedAt"/>
    </collection>
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `name`, logo, `status`, created_at, updated_at
  </sql>
  <select id="checkExistByName" resultType="java.lang.Integer">

    SELECT EXISTS(SELECT 1 FROM trade_platform WHERE `name` = #{name} LIMIT 1)

  </select>

  <select id="findAllByUserId" parameterType="int" resultMap="BaseResultMap">
  select
  trade_platform.id ,
  trade_platform.status ,
  trade_platform.created_at,
  trade_platform.updated_at,
  trade_platform.name,
  trade_platform.logo,
  trade_platform_api.id 'tpaId',
  trade_platform_api.user_id,
  trade_platform_api.trade_platform_id 'tid',
  trade_platform_api.sign,
  trade_platform_api.access_key,
  trade_platform_api.secret_key,
  trade_platform_api.nickname,
  trade_platform_api.status 'tpaStatus',
  trade_platform_api.created_at 'tpaCreateAt',
  trade_platform_api.updated_at 'tpaUpdateAt',
  coin_pair.id 'cpId',
  coin_pair.name 'cpName',
  coin_pair.is_popular ,
  coin_pair.is_official_set ,
  coin_pair.status 'cpStatus',
  coin_pair.created_at 'cpCreatedAt',
  coin_pair.updated_at 'cpUpdatedAt'
  from trade_platform left join trade_platform_api on trade_platform.id=trade_platform_api.trade_platform_id
  left join  trade_platform_coin_pair on trade_platform.id=trade_platform_coin_pair.trade_platform_id
  left join coin_pair on trade_platform_coin_pair.coin_pair_id=coin_pair.id
  where trade_platform_api.user_id =#{userId,jdbcType=INTEGER}
    </select>
  <select id="findAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from trade_platform 
  </select>
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    trade_platform.id ,
    trade_platform.status ,
    trade_platform.created_at,
    trade_platform.updated_at,
    trade_platform.name,
    trade_platform.logo,
    trade_platform_api.id 'tpaId',
    trade_platform_api.user_id,
    trade_platform_api.trade_platform_id 'tid',
    trade_platform_api.sign,
    trade_platform_api.access_key,
    trade_platform_api.secret_key,
    trade_platform_api.nickname,
    trade_platform_api.status 'tpaStatus',
    trade_platform_api.created_at 'tpaCreateAt',
    trade_platform_api.updated_at 'tpaUpdateAt',
    coin_pair.id 'cpId',
    coin_pair.name 'cpName',
    coin_pair.is_popular ,
    coin_pair.is_official_set ,
    coin_pair.status 'cpStatus',
    coin_pair.created_at 'cpCreatedAt',
    coin_pair.updated_at 'cpUpdatedAt'
    from trade_platform left join trade_platform_api on trade_platform.id=trade_platform_api.trade_platform_id
    left join  trade_platform_coin_pair on trade_platform.id=trade_platform_coin_pair.trade_platform_id
    left join coin_pair on trade_platform_coin_pair.coin_pair_id=coin_pair.id
    where trade_platform.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="int">
    <!--@mbg.generated-->
    delete from trade_platform
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.bosenkeji.vo.tradplateform.TradePlatform" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into trade_platform (`name`, logo, `status`, 
      created_at, updated_at)
    values (#{name,jdbcType=VARCHAR}, #{logo,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="cn.bosenkeji.vo.tradplateform.TradePlatform" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into trade_platform
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="logo != null">
        logo,
      </if>
      `status`,
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="logo != null">
        #{logo,jdbcType=VARCHAR},
      </if>
      #{status,jdbcType=TINYINT},
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.bosenkeji.vo.tradplateform.TradePlatform">
    <!--@mbg.generated-->
    update trade_platform
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="logo != null">
        logo = #{logo,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.bosenkeji.vo.tradplateform.TradePlatform">
    <!--@mbg.generated-->
    update trade_platform
    set `name` = #{name,jdbcType=VARCHAR},
      logo = #{logo,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=TINYINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>