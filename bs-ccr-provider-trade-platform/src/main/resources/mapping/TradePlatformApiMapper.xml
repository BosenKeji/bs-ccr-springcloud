<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.bosenkeji.mapper.TradePlatformApiMapper">
  <resultMap id="BaseResultMap" type="cn.bosenkeji.vo.tradeplatform.TradePlatformApi">
    <!--@mbg.generated-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="trade_platform_id" jdbcType="INTEGER" property="tradePlatformId" />
    <result column="sign" jdbcType="VARCHAR" property="sign" />
    <result column="secret" jdbcType="VARCHAR" property="secret" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <association property="tradePlatform" column="trade_platform_id" javaType="cn.bosenkeji.vo.tradeplatform.TradePlatform"
                 select="cn.bosenkeji.mapper.TradePlatformMapper.selectByPrimaryKey" />

  </resultMap>

  <resultMap id="TradePlatformApiListResultMap" type="cn.bosenkeji.vo.tradeplatform.TradePlatformApiListResult">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="trade_platform_id" jdbcType="INTEGER" property="tradePlatformId" />
    <result column="secret" jdbcType="VARCHAR" property="secret" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <association property="tradePlatform" column="trade_platform_id" javaType="cn.bosenkeji.vo.tradeplatform.TradePlatform"
                 select="cn.bosenkeji.mapper.TradePlatformMapper.selectByPrimaryKey" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, user_id, trade_platform_id, sign, nickname, `status`,
    created_at, updated_at,secret
  </sql>
  <select id="findAllByUser" parameterType="integer" resultMap="TradePlatformApiListResultMap">
    select
    <include refid="Base_Column_List"/>
    from trade_platform_api
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="findAllByUserId" parameterType="integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from trade_platform_api
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="findAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from trade_platform_api
  </select>
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <include refid="Base_Column_List" />
    from trade_platform_api
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByTradePlatformId" parameterType="int" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from trade_platform_api
    where trade_platform_id = #{tradePlatformId,jdbcType=INTEGER}
  </select>
  <select id="selectByUserId" parameterType="int" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from trade_platform_api
    where user_id = #{userId}
  </select>

  <select id="checkExistByKeyAndStatus"  resultType="integer">
    select exists (select 1 from trade_platform_api where trade_platform_api.user_id = #{param1,jdbcType=INTEGER} and trade_platform_api.sign=#{param2,jdbcType=VARCHAR} and trade_platform_api.status = #{param3,jdbcType=INTEGER} limit 1)
  </select>

  <select id="checkExistByTradePlatformIdAndUserId" parameterType="int" resultType="integer">
    select exists (select 1 from trade_platform_api where trade_platform_api.trade_platform_id=#{param1} and trade_platform_api.user_id=#{param2} limit 1)
  </select>


  <select id="checkExistByUserIdAndNickName"  resultType="integer">
    select exists (select 1 from trade_platform_api where trade_platform_api.user_id=#{param1} and trade_platform_api.nickname=#{param2} limit 1)
  </select>

  <select id="checkExistByIdAndUserId" parameterType="int" resultType="integer">
    select exists (select 1 from trade_platform_api where id=#{param1} and user_id=#{param2} limit 1)
  </select>

  <delete id="deleteByTradePlatformKey" parameterType="int">
    <!--@mbg.generated-->
    delete from trade_platform_api
    where trade_platform_id = #{id,jdbcType=INTEGER}
  </delete>

  <delete id="deleteByPrimaryKey" parameterType="int">
    <!--@mbg.generated-->
    delete from trade_platform_api
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.bosenkeji.vo.tradeplatform.TradePlatformApi" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into trade_platform_api (user_id, trade_platform_id, sign,
    access_key, secret_key, nickname,
    `status`, created_at, updated_at
    )
    values (#{userId,jdbcType=INTEGER}, #{tradePlatformId,jdbcType=INTEGER}, #{sign,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR},
    #{status,jdbcType=TINYINT}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP},#{secret,jdbcType=VARCHAR}
    )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="cn.bosenkeji.vo.tradeplatform.TradePlatformApi" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into trade_platform_api
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId > 0">
      user_id,
      </if>
      <if test="tradePlatformId > 0">
        trade_platform_id,
      </if>
      <if test="sign != null">
        sign,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      `status`,
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="secret != null">
        secret,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId > 0">
      #{userId,jdbcType=INTEGER},
      </if>
      <if test="tradePlatformId > 0">
      #{tradePlatformId,jdbcType=INTEGER},
      </if>
      <if test="sign != null">
        #{sign,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      #{status,jdbcType=TINYINT},
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="secret != null ">
        #{secret,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.bosenkeji.vo.tradeplatform.TradePlatformApi">
    <!--@mbg.generated-->
    update trade_platform_api
    <set>
      <if test="userId != 0">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="tradePlatformId != 0">
        trade_platform_id = #{tradePlatformId,jdbcType=INTEGER},
      </if>
      <if test="sign != null">
        sign = #{sign,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="status == 1">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="secret != null">
        secret = #{secret,jdbcType=VARCHAR}
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.bosenkeji.vo.tradeplatform.TradePlatformApi">
    <!--@mbg.generated-->
    update trade_platform_api
    set user_id = #{userId,jdbcType=INTEGER},
    trade_platform_id = #{tradePlatformId,jdbcType=INTEGER},
    sign = #{sign,jdbcType=VARCHAR},
    nickname = #{nickname,jdbcType=VARCHAR},
    `status` = #{status,jdbcType=TINYINT},
    created_at = #{createdAt,jdbcType=TIMESTAMP},
    updated_at = #{updatedAt,jdbcType=TIMESTAMP},
    secret = #{secret,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>